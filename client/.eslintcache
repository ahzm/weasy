[{"C:\\Users\\angel\\stage-bpmn\\client\\src\\index.js":"1","C:\\Users\\angel\\stage-bpmn\\client\\src\\App.js":"2","C:\\Users\\angel\\stage-bpmn\\client\\src\\reportWebVitals.js":"3","C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\abstractGraph.js":"4","C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\addTask.js":"5","C:\\Users\\angel\\stage-bpmn\\client\\src\\styles\\Theme.js":"6","C:\\Users\\angel\\stage-bpmn\\client\\src\\context\\taskContext.js":"7","C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\tasks.js":"8","C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\po.js":"9","C:\\Users\\angel\\stage-bpmn\\client\\src\\components\\Dashboard.js":"10","C:\\Users\\angel\\stage-bpmn\\client\\src\\context\\coupleContext.js":"11","C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\addPO.js":"12","C:\\Users\\angel\\stage-bpmn\\client\\src\\helper\\makeId.js":"13","C:\\Users\\angel\\stage-bpmn\\client\\src\\components\\po.js":"14","C:\\Users\\angel\\stage-bpmn\\client\\src\\components\\tasks.js":"15","C:\\Users\\angel\\stage-bpmn\\client\\src\\helper\\api.js":"16","C:\\Users\\angel\\stage-bpmn\\client\\src\\helper\\getbpmn.js":"17"},{"size":538,"mtime":1611310596988,"results":"18","hashOfConfig":"19"},{"size":1918,"mtime":1624381745648,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1606202939019,"results":"21","hashOfConfig":"19"},{"size":3458,"mtime":1624373491951,"results":"22","hashOfConfig":"19"},{"size":4393,"mtime":1624374373760,"results":"23","hashOfConfig":"19"},{"size":424,"mtime":1623673071387,"results":"24","hashOfConfig":"19"},{"size":480,"mtime":1624363586085,"results":"25","hashOfConfig":"19"},{"size":1297,"mtime":1624375953140,"results":"26","hashOfConfig":"19"},{"size":1569,"mtime":1624374427703,"results":"27","hashOfConfig":"19"},{"size":6148,"mtime":1624366556087,"results":"28","hashOfConfig":"19"},{"size":497,"mtime":1624363585192,"results":"29","hashOfConfig":"19"},{"size":4314,"mtime":1624373923965,"results":"30","hashOfConfig":"19"},{"size":470,"mtime":1624373147440,"results":"31","hashOfConfig":"19"},{"size":1450,"mtime":1624007293574,"results":"32","hashOfConfig":"19"},{"size":1623,"mtime":1624363167150,"results":"33","hashOfConfig":"19"},{"size":29749,"mtime":1624372791980,"results":"34","hashOfConfig":"19"},{"size":3503,"mtime":1624373090487,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1xtv0cs",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\angel\\stage-bpmn\\client\\src\\index.js",[],["74","75"],"C:\\Users\\angel\\stage-bpmn\\client\\src\\App.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\reportWebVitals.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\abstractGraph.js",["76","77"],"//graph plus simple pas sub graph\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { TaskContext } from \"../context/taskContext\";\r\nimport { CoupleContext } from \"../context/coupleContext\";\r\nimport DiagramComp from \"../helper/api\";\r\nimport \"../index.css\";\r\nimport { PointSpreadLoading } from \"react-loadingg\";\r\n/**\r\n * \r\n * @returns render of the abstract graph \r\n */\r\nfunction Graph() {\r\n  const [tasks ] = useContext(TaskContext);\r\n  const [couples] = useContext(CoupleContext);\r\n  const [response, setRes] = useState({});\r\n  const [nodes, setNodes] = useState([]);\r\n  const [arcs, setArcs] = useState([]);\r\n  const [active, setActive] = useState(false);\r\n  const [succ, setSucc] = useState(false);\r\n  const [initialGraph, setInitialGraph] = useState({});\r\n// eslint-disable-next-line\r\n/**\r\n * function to call after component mount and calls api for get the python object to render abstract graph\r\n */\r\n  useEffect(() => {\r\n    document.title = \"Abstract Graph \";\r\n    const reqOp = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ tasks: tasks, couples: couples }),\r\n    };\r\n    fetch(\"http://localhost:3001/abstgraph\", reqOp).then((res) => {\r\n      res.json().then((data) => {\r\n        setRes(data);\r\n        setNodes(data.nodes);\r\n        setArcs(data.arcs);\r\n      });\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    if (nodes.length !== 0 && arcs.length !== 0) {\r\n      setInitialGraph(makeNodes(nodes, tasks, arcs));\r\n      setSucc(true);\r\n    }\r\n  }, [nodes, arcs]);\r\n  const makeSubgraph = (subgraph, tasks) => {\r\n    if (Object.entries(subgraph).length !== 0) {\r\n      return makeNodes(subgraph.nodes, tasks, subgraph.arcs);\r\n    }\r\n    return {};\r\n  };\r\n  /**\r\n   * format nodes for the api \r\n   * @param {array} nodes every node in array is a json\r\n   * @param {array} tasks every task in arry is a json\r\n   * @param {arry} arcs every arc in arry is an array \r\n   * @returns nodes and links \r\n   */\r\n  const makeNodes = (nodes, tasks, arcs) => {\r\n    let x = 20;\r\n    let y = 0;\r\n    let ns = [];\r\n    let as = [];\r\n    let subgraph = {};\r\n    nodes.map((node) => {\r\n      const act = [];\r\n      node.list_activities.forEach((activi) => {\r\n        const cont = tasks.filter((task) => task.id === activi);\r\n        act.push(cont[0]);\r\n      });\r\n      subgraph = makeSubgraph(node.subgraph, tasks);\r\n      ns = [\r\n        ...ns,\r\n        {\r\n          id: node.ident,\r\n          content: act,\r\n          coordinates: [x, y],\r\n          subgraph: subgraph,\r\n        },\r\n      ];\r\n      x = x + 500;\r\n      y = y + 60;\r\n    });\r\n    as = arcs.map((arc) => {\r\n      let source = nodes.filter((node) => node.ident === arc.source_node)[0];\r\n      let target = nodes.filter((node) => node.ident === arc.target_node)[0];\r\n      return {\r\n        source: source,\r\n        target: target,\r\n      };\r\n    });\r\n    return {\r\n      nodes: ns,\r\n      links: as,\r\n    };\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ margin: \"40px\" }}>{succ ? (\r\n          <DiagramComp\r\n            initialGraph={initialGraph}\r\n            response={response}\r\n            tasks={tasks}\r\n            active={active}\r\n            setActive={setActive}\r\n            setInitialGraph={setInitialGraph}\r\n          />\r\n        ) : (\r\n          <PointSpreadLoading size={\"large\"} color={\"#7E6383\"} />\r\n        )}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\addTask.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\styles\\Theme.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\context\\taskContext.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\tasks.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\po.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\components\\Dashboard.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\context\\coupleContext.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\pages\\addPO.js",["78"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Grid, IconButton, TextField } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { TaskContext } from \"../context/taskContext\";\r\nimport { CoupleContext } from \"../context/coupleContext\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\r\nimport PO from \"./po\";\r\n// eslint-disable-next-line\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n/**\r\n * @returns component form for add partial order and cards of the partial orders\r\n */\r\nfunction AddPO() {\r\n  const [couple, setCouple] = useState([\"\", \"\"]);\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [tasks] = useContext(TaskContext);\r\n  // eslint-disable-next-line\r\n  const [couples, setCouples] = useContext(CoupleContext);\r\n  // eslint-disable-next-line\r\n  /**\r\n   * handler of the input for the frist couple in the partial order\r\n   * @param {object} event default of the input \r\n   * @param {object} value value in the input\r\n   */\r\n  const handleCouple1 = (event, value) => {\r\n    const copy = couple.slice();\r\n    if (value !== null) {\r\n      copy[0] = value.id;\r\n      setCouple(copy);\r\n    }\r\n  };\r\n  // eslint-disable-next-line\r\n  /**\r\n   * handler of the input for the second couple in the partial order\r\n   * @param {object} event default of the input \r\n   * @param {object} value value in the input\r\n   */\r\n  const handleCouple2 = (event, value) => {\r\n    const copy = couple.slice();\r\n    if (value !== null) {\r\n      copy[1] = value.id;\r\n      setCouple(copy);\r\n    }\r\n  };\r\n  /**\r\n   * handeler for submit the form \r\n   * @param {object} e default event for the button for submit form\r\n   */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setCouples((prevCouples) => [...prevCouples, couple]);\r\n  };\r\n  // eslint-disable-next-line\r\n  /**\r\n   * disable button if inputs are empty\r\n   */\r\n  useEffect(() => {\r\n    document.title = \"Add partial order\";\r\n    if (couple[0] !== \"\" && couple[1] !== \"\" && couple[0] !== couple[1]) {\r\n      setDisabled(false);\r\n    } else {\r\n      setDisabled(true);\r\n    }\r\n  });\r\n  return (\r\n    <>\r\n      <h1>Add partial order</h1>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"flex-start\"\r\n        spacing={7}\r\n      >\r\n        <Grid item>\r\n          <Autocomplete\r\n            id=\"couple-1-opt\"\r\n            options={tasks}\r\n            getOptionLabel={(option) => option.desc}\r\n            onChange={handleCouple1}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Couple 1\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <div style={{ padding: \"18px\" }}>\r\n            <ArrowForwardIcon color=\"primary\" fontSize=\"large\" />\r\n          </div>\r\n        </Grid>\r\n        <Grid item>\r\n          <Autocomplete\r\n            id=\"couple-1-opt\"\r\n            options={tasks}\r\n            getOptionLabel={(option) => option.desc}\r\n            onChange={handleCouple2}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Couple 1\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"18px\" }}\r\n            disabled={disabled ? true : false}\r\n            onClick={handleSubmit}\r\n          >\r\n            Add a couple\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Tooltip title=\"Abstract Graph\">\r\n            <IconButton\r\n              aria-label=\"next\"\r\n              variant=\"contained\"\r\n              component={Link}\r\n              to={\"/abstractgraph\"}\r\n            >\r\n              <FastForwardIcon fontSize=\"large\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Grid>\r\n      </Grid>\r\n      <PO />\r\n    </>\r\n  );\r\n}\r\nexport default AddPO;\r\n","C:\\Users\\angel\\stage-bpmn\\client\\src\\helper\\makeId.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\components\\po.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\components\\tasks.js",[],"C:\\Users\\angel\\stage-bpmn\\client\\src\\helper\\api.js",["79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],"import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Prompt, useHistory } from \"react-router-dom\";\r\nimport { PointSpreadLoading } from \"react-loadingg\";\r\n\r\nimport ellipse from \"../styles/node-32.png\";\r\nimport trash from \"../styles/trash.png\";\r\nimport zoomin from \"../styles/zoom-in.png\";\r\nimport zoomout from \"../styles/zoom-out.png\";\r\nimport grid from \"../styles/grid.gif\";\r\nimport arrow from \"../styles/arrow.png\";\r\nimport \"../index.css\";\r\n\r\nimport {\r\n  mxGraph,\r\n  mxRubberband,\r\n  mxPopupMenu,\r\n  mxKeyHandler,\r\n  mxClient,\r\n  mxUtils,\r\n  mxEvent,\r\n  mxConstants,\r\n  mxToolbar,\r\n  mxDragSource,\r\n  mxCell,\r\n  mxGeometry,\r\n  mxCellState,\r\n  mxVertexHandler,\r\n} from \"mxgraph-js\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  CssBaseline,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  IconButton,\r\n  Tooltip,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\nimport BpmnDiagram from \"./getbpmn\";\r\nimport ReactModal from \"react-modal\";\r\n/**\r\n * Style for the top bar\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n}));\r\n/**\r\n * Card that shows the compute time of abstract graph\r\n * @param {max time, min time} props\r\n * @returns Card component\r\n */\r\nfunction ComputeTime(props) {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"relative\",\r\n        height: window.innerHeight - 400,\r\n        width: window.innerWidth - 100,\r\n      }}\r\n    >\r\n      {props.comp ? (\r\n        <Card\r\n          style={{\r\n            color: \"#ffffff\",\r\n            backgroundColor: \"#3f3141\",\r\n            position: \"absolute\",\r\n            bottom: 0,\r\n            right: 0,\r\n            zIndex: 99,\r\n          }}\r\n        >\r\n          <CardContent>\r\n            <Typography variant=\"h5\" conponent=\"h2\">\r\n              <AccessTimeIcon fontSize=\"small\" color=\"inherit\" /> Compute Time\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              <strong>Max Time:</strong> {props.max} <em>Time Units</em>\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              <strong>Min Time:</strong> {props.min} <em>Time Units</em>\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\nComputeTime.propTypes = {\r\n  /** Max time of the abstract graph */\r\n  max: PropTypes.number,\r\n  /** Min time of the abstracth graph */\r\n  min: PropTypes.number,\r\n};\r\n/**\r\n * Top menu with the title abstract graph\r\n * @param {children} props Component that is show in the page (the abstract graph)\r\n * @returns page with the top menu and the abstract graph\r\n */\r\nfunction Menu(props) {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  function handleBack() {\r\n    history.push(\"/\");\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        style={{ backgroundColor: \"#7E6383\" }}\r\n        position=\"fixed\"\r\n        className={classes.appBar}\r\n      >\r\n        <Toolbar>\r\n          <IconButton color=\"inherit\" onClick={handleBack}>\r\n            <Prompt message=\"Are you sure you want to go back? Your modifications in the abstract graph will be lost.\" />\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Abstract Graph\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <main style={{ marginTop: 50, marginLeft: 30 }}>{props.children}</main>\r\n    </div>\r\n  );\r\n}\r\nMenu.propTypes = {\r\n  /** Component inside the menu*/\r\n  children: PropTypes.elementType,\r\n};\r\n/**\r\n *  Default size of tasks\r\n */\r\nlet taskSize = 80;\r\n/**\r\n * Class for render the abstract graph\r\n */\r\nclass DiagramComp extends Component {\r\n  /**\r\n   * Constructor of the class\r\n   * @param {json} props  api response {\"nodes\": array,\"arcs\": array,\"minTime\": number,\"maxTime\": number}\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showModal: false,\r\n      comp: false,\r\n      max: this.props.response.maxTime,\r\n      min: this.props.response.minTime,\r\n      menu: false,\r\n      data: {},\r\n      gnsp: null,\r\n      bpmn: \"\",\r\n    };\r\n    this.LoadGraph = this.LoadGraph.bind(this);\r\n    this.compute = this.compute.bind(this);\r\n    this.generateBPMN = this.generateBPMN.bind(this);\r\n    this.getObj = this.getObj.bind(this);\r\n    this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    this.isLoop = this.isLoop.bind(this);\r\n    this.noStart = this.noStart.bind(this);\r\n  }\r\n  /**\r\n   * Frist function after mounting of the component\r\n   */\r\n  componentDidMount() {\r\n    this.LoadGraph();\r\n  }\r\n  /**\r\n   * Use MxGraph for render the abstract graph\r\n   */\r\n  LoadGraph() {\r\n    var container = ReactDOM.findDOMNode(this.refs.divGraph);\r\n    var tbContainer = ReactDOM.findDOMNode(this.refs.tbContainer);\r\n    \r\n    /* Connect\r\n    // Defines a subclass for mxVertexHandler that adds a set of clickable\r\n    // icons to every selected vertex.\r\n    function mxVertexToolHandler(state) {\r\n      mxVertexHandler.apply(this, arguments);\r\n    }\r\n\r\n    mxVertexToolHandler.prototype = new mxVertexHandler();\r\n    mxVertexToolHandler.prototype.constructor = mxVertexToolHandler;\r\n\r\n    mxVertexToolHandler.prototype.domNode = null;\r\n\r\n    mxVertexToolHandler.prototype.init = function () {\r\n      mxVertexHandler.prototype.init.apply(this, arguments);\r\n\r\n    \r\n      this.domNode = document.createElement(\"div\");\r\n      this.domNode.style.position = \"absolute\";\r\n      this.domNode.style.whiteSpace = \"nowrap\";\r\n\r\n      // Workaround for event redirection via image tag in quirks and IE8\r\n      function createImage(src) {\r\n        if (mxClient.IS_IE && !mxClient.IS_SVG) {\r\n          var img = document.createElement(\"div\");\r\n          img.style.backgroundImage = \"url(\" + src + \")\";\r\n          img.style.backgroundPosition = \"center\";\r\n          img.style.backgroundRepeat = \"no-repeat\";\r\n          img.style.display = mxClient.IS_QUIRKS ? \"inline\" : \"inline-block\";\r\n\r\n          return img;\r\n        } else {\r\n          return mxUtils.createImage(src);\r\n        }\r\n      }\r\n\r\n      // Connect\r\n      var img = createImage(arrow);\r\n      img.setAttribute(\"title\", \"Connect\");\r\n      img.style.cursor = \"pointer\";\r\n      img.style.width = \"15px\";\r\n      img.style.height = \"15px\";\r\n      mxEvent.addGestureListeners(\r\n        img,\r\n        mxUtils.bind(this, function (evt) {\r\n          var pt = mxUtils.convertPoint(\r\n            this.graph.container,\r\n            mxEvent.getClientX(evt),\r\n            mxEvent.getClientY(evt)\r\n          );\r\n          this.graph.connectionHandler.start(this.state, pt.x, pt.y);\r\n          this.graph.isMouseDown = true;\r\n          this.graph.isMouseTrigger = mxEvent.isMouseEvent(evt);\r\n          mxEvent.consume(evt);\r\n        })\r\n      );\r\n      this.domNode.appendChild(img);\r\n\r\n      this.graph.container.appendChild(this.domNode);\r\n     this.redrawTools();\r\n    };\r\n    mxVertexToolHandler.prototype.redraw = function () {\r\n      mxVertexHandler.prototype.redraw.apply(this);\r\n      this.redrawTools();\r\n    };\r\n\r\n    mxVertexToolHandler.prototype.redrawTools = function () {\r\n      if (this.state != null && this.domNode != null) {\r\n        var dy =\r\n          mxClient.IS_VML && document.compatMode == \"CSS1Compat\" ? 20 : 4;\r\n        this.domNode.style.left = this.state.x + this.state.width - 56 + \"px\";\r\n        this.domNode.style.top = this.state.y + this.state.height + dy + \"px\";\r\n      }\r\n    }; \r\n\r\n    mxVertexToolHandler.prototype.destroy = function (sender, me) {\r\n      mxVertexHandler.prototype.destroy.apply(this, arguments);\r\n\r\n      if (this.domNode != null) {\r\n        this.domNode.parentNode.removeChild(this.domNode);\r\n        this.domNode = null;\r\n      }\r\n    }; */\r\n    // Checks if the browser is supported\r\n    if (!mxClient.isBrowserSupported()) {\r\n      // Displays an error message if the browser is not supported.\r\n      mxUtils.error(\"Browser is not supported!\", 200, false);\r\n    } else {\r\n      // Disables the built-in context menu\r\n      mxEvent.disableContextMenu(container);\r\n      //Toolbar\r\n      var toolbar = new mxToolbar(tbContainer);\r\n      toolbar.enabled = true;\r\n      // Creates the graph inside the given container\r\n      var graph = new mxGraph(container);\r\n      graph.dropEnabled = true;\r\n      /* Connect\r\n      mxDragSource.prototype.getDropTarget = function (graph, x, y) {\r\n        var cell = graph.getCellAt(x, y);\r\n        if (!graph.isValidDropTarget(cell)) {\r\n          cell = null;\r\n        }\r\n        return cell;\r\n      }; */\r\n      // Enables rubberband selection\r\n      new mxRubberband(graph);\r\n      new mxPopupMenu(graph);\r\n      /**\r\n       * Key handler for delete objects in abstract graph\r\n       */\r\n      var keyHandler = new mxKeyHandler(graph);\r\n      keyHandler.bindKey(46, function (evt) {\r\n        if (graph.isEnabled()) {\r\n          graph.removeCells();\r\n        }\r\n      });\r\n      keyHandler.bindKey(8, function (evt) {\r\n        if (graph.isEnabled()) {\r\n          graph.removeCells();\r\n        }\r\n      });\r\n      // Gets the default parent for inserting new cells. This is normally the first\r\n      // child of the root (ie. layer 0).\r\n      var parent = graph.getDefaultParent();\r\n\r\n      // Enables tooltips, new connections and panning\r\n      graph.setPanning(true);\r\n      graph.setTooltips(true);\r\n      graph.setConnectable(true);\r\n      graph.setEnabled(true);\r\n      graph.setEdgeLabelsMovable(false);\r\n      graph.setVertexLabelsMovable(false);\r\n      graph.setMultigraph(true);\r\n      graph.setGridEnabled(true);\r\n      graph.setAllowDanglingEdges(true);\r\n      graph.getModel().beginUpdate();\r\n      /*  Connect\r\n      graph.connectionHandler.createEdgeState = function (me) {\r\n        var edge = graph.createEdge(null, null, null, null, null);\r\n\r\n        return new mxCellState(\r\n          this.graph.view,\r\n          edge,\r\n          this.graph.getCellStyle(edge)\r\n        );\r\n      };\r\n      graph.connectionHandler.createTarget = true;\r\n\r\n      graph.createHandler = function (state) {\r\n        if (state != null && this.model.isVertex(state.cell)) {\r\n          return new mxVertexToolHandler(state);\r\n        }\r\n\r\n        return mxGraph.prototype.createHandler.apply(this, arguments);\r\n      };\r\n */\r\n/**\r\n * Styles for the node and task\r\n * Node = ROUNDES\r\n * Task= TASK\r\n */\r\n      var style = new Object();\r\n      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_ELLIPSE;\r\n      style[mxConstants.STYLE_FILL_OPACITY] = 30;\r\n      style[mxConstants.STYLE_STROKECOLOR] = \"#212F3D\";\r\n      style[mxConstants.STYLE_FILLCOLOR] = \"#D5F5E3\";\r\n      style[mxConstants.STYLE_STROKEWIDTH] = 2;\r\n      graph.getStylesheet().putCellStyle(\"ROUNDED\", style);\r\n      var styleTask = new Object();\r\n      styleTask[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_HEXAGON;\r\n      styleTask[mxConstants.STYLE_FILL_OPACITY] = 30;\r\n      styleTask[mxConstants.STYLE_STROKECOLOR] = \"#212F3D\";\r\n\r\n      styleTask[mxConstants.STYLE_FILLCOLOR] = \"#D5F5E3\";\r\n      styleTask[mxConstants.STYLE_STROKE_OPACITY] = 50;\r\n      styleTask[mxConstants.STYLE_STROKEWIDTH] = 1;\r\n      graph.getStylesheet().putCellStyle(\"TASK\", styleTask);\r\n/** set default color for connection */\r\n      graph.getStylesheet().getDefaultEdgeStyle()[\r\n        mxConstants.STYLE_STROKECOLOR\r\n      ] = \"#212F3D\";\r\n/** Function for the drag node in the side menu */\r\n      const addVertex = (icon, w, h, style) => {\r\n        var vertex = new mxCell(null, new mxGeometry(0, 0, w, h), style);\r\n        vertex.setVertex(true);\r\n        addToolbarItem(graph, toolbar, vertex, icon);\r\n      };\r\n      try {\r\n        addVertex(ellipse, 45, 45, \"ROUNDED\");\r\n\r\n        toolbar.addLine();\r\n        /**\r\n         * Delete object in the abstract graph, side menu option\r\n         */\r\n        toolbar.addItem(\r\n          \"Delete\" /* Title */,\r\n          trash /* Icon */,\r\n          function () {\r\n            if (graph.isEnabled()) {\r\n              graph.removeCells();\r\n            }\r\n          } /* function */,\r\n          null /* pressed icon */,\r\n          null /* style */,\r\n          null /* factory Method */\r\n        );\r\n\r\n        toolbar.addLine();\r\n        /** Zoom in the abstract graph */\r\n        toolbar.addItem(\"Zoom In\", zoomin, function () {\r\n          graph.zoomIn();\r\n        });\r\n        toolbar.addLine();\r\n        /** Zoom out the abstract graph */\r\n        toolbar.addItem(\"Zoom Out\", zoomout, function () {\r\n          graph.zoomOut();\r\n        });\r\n        toolbar.addLine();\r\n\r\n        //mxGrapg component\r\n        var doc = mxUtils.createXmlDocument();\r\n        var node = doc.createElement(\"Node\");\r\n        let nodess = [];\r\n        let linksCopy = [];\r\n        /**\r\n         * copy of links to build abstract graph\r\n         * @param {array} links of original links \r\n         */\r\n        const copyLinks = (links = [...this.props.initialGraph.links]) => {\r\n          links.map((d) => {\r\n            // linksCopy.push(d)\r\n            linksCopy.push(d);\r\n          });\r\n        };\r\n        copyLinks();\r\n        node.setAttribute(\"ComponentID\", \"[P01]\");\r\n     /**\r\n      * Build the abstract graph\r\n      * @param {array} nodes \r\n      * @param {number} initX \r\n      * @param {number} initY \r\n      */\r\n        const makeGraph = (nodes, initX = 0, initY = 20) => {\r\n         \r\n          nodes.map((node) => {\r\n            // size node subgraph\r\n            const getSize = (ns, w1, deep = 0) => {\r\n              let w2 = w1;\r\n              ns.forEach((n) => {\r\n                w2 = n.content.length + w2;\r\n                if (Object.entries(n.subgraph).length !== 0) {\r\n                  w2 = getSize(n.subgraph.nodes, w2, deep + 1);\r\n                }\r\n              });\r\n              return w2;\r\n            };\r\n            /**\r\n             * \r\n             * @param {number} w \r\n             * @returns array with the space needed inside the node for the number of tasks \r\n             */\r\n            const getSquare = (w) => {\r\n              let sa = 0;\r\n              if (!Number.isInteger(Math.sqrt(w))) {\r\n                w = Math.pow(Math.ceil(Math.sqrt(w)), 2);\r\n              }\r\n              for (let i = 0; i < w + 1; i++) {\r\n                sa = Math.PI * Math.pow(taskSize / 2, 2) + sa;\r\n              }\r\n              //taille Cote\r\n              let l = Math.sqrt(sa);\r\n              let d = Math.sqrt(Math.pow(l, 2) + Math.pow(l, 2));\r\n              let pc = (d - l) / 2;\r\n              return [l, d, pc];\r\n            };\r\n            /**\r\n             * Function for get the Diametre of the node\r\n             * @param {object} sg subgraph\r\n             * @param {number} diametre of the circle\r\n             * @returns \r\n             */\r\n            const getDiametre = (sg, diametre = 0) => {\r\n              diametre =\r\n                sg.links.length * 30 +\r\n                getSize(sg.nodes, 0) * taskSize * 1.5 +\r\n                diametre;\r\n\r\n              return diametre;\r\n            };\r\n            // initial size of node\r\n            let w = node.content.length;\r\n            // coordinates for the tasks and node\r\n            let x = node.coordinates[0] / 2 + initX;\r\n            let y = initY;\r\n            let x2 = 0;\r\n            let y2 = 0;\r\n            let xs = [];\r\n            let ys = [];\r\n            // if node only has one task\r\n            if (w === 1 && Object.entries(node.subgraph).length === 0) {\r\n              w = w * taskSize * 1.75;\r\n              x2 = x + w / 2 - taskSize / 2;\r\n              y2 = y;\r\n              ys = [y + w / 2 - taskSize / 2];\r\n              xs = [x2];\r\n            } \r\n            // if node has more that one task and no subgraph\r\n            else if (w > 1 && Object.entries(node.subgraph).length == 0) {\r\n              const [l, d, pc] = getSquare(w);\r\n              x2 = x + pc;\r\n              y2 = y + pc;\r\n              let x2Copy = x2;\r\n              node.content.map((n, i) => {\r\n                xs.push(x2);\r\n                ys.push(y2);\r\n                x2 = x2 + taskSize;\r\n                if (x2 > x2Copy + l) {\r\n                  x2 = x2Copy;\r\n                  y2 = y2 + taskSize;\r\n                }\r\n              });\r\n              w = d;\r\n            } \r\n            // if node has subgraph\r\n            else {\r\n              let [l, d, pc] = getSquare(w);\r\n\r\n              d = getDiametre(node.subgraph) * 1.2;\r\n              l = d * 0.707107;\r\n              pc = (d - l) / 2;\r\n\r\n              x2 = x + pc;\r\n              y2 = y + pc;\r\n\r\n              let x2Copy = x2;\r\n              node.content.map(() => {\r\n                xs.push(x2);\r\n                ys.push(y2);\r\n                x2 = x2 + taskSize;\r\n                if (x2 > x2Copy + l) {\r\n                  x2 = x2Copy;\r\n                  y2 = y2 + taskSize;\r\n                }\r\n              });\r\n              initX = x;\r\n\r\n              w = d;\r\n              let mitad = y + w / 2;\r\n              initY = mitad - (taskSize + 15) / 2;\r\n            }\r\n\r\n            //render of nodes\r\n            let content = graph.insertVertex(\r\n              parent,\r\n              node.id,\r\n              null,\r\n              x,\r\n              y,\r\n              w,\r\n              w,\r\n              \"ROUNDED\"\r\n            );\r\n            content.setConnectable(true);\r\n\r\n            // render of tasks\r\n            node.content.map((t, i) => {\r\n              let tas = graph.insertVertex(\r\n                parent,\r\n                t.id,\r\n                t.desc,\r\n                xs[i],\r\n                ys[i],\r\n                taskSize,\r\n                taskSize,\r\n                \"TASK\"\r\n              );\r\n              tas.setConnectable(false);\r\n            });\r\n            // recursion if node has subgraph\r\n            if (Object.entries(node.subgraph).length !== 0) {\r\n              copyLinks(node.subgraph.links);\r\n              makeGraph(node.subgraph.nodes, initX, initY);\r\n            }\r\n            nodess.push({ id: node.id, content: content });\r\n          });\r\n        };\r\n        // make initial abstract graph\r\n        makeGraph(this.props.initialGraph.nodes);\r\n        nodess.map((node) => {\r\n          linksCopy.forEach((d, i) => {\r\n            if (d.source.ident === node.id || d.target.ident === node.id) {\r\n              let source = nodess.filter(\r\n                (node) => node.id === d.source.ident\r\n              )[0];\r\n              let target = nodess.filter(\r\n                (node) => node.id === d.target.ident\r\n              )[0];\r\n              let arc = graph.insertEdge(\r\n                parent,\r\n                null,\r\n                null,\r\n                source.content,\r\n                target.content,\r\n                \"strokeColor=#212F3D\"\r\n              );\r\n              linksCopy.splice(i, 1);\r\n            }\r\n          });\r\n        });\r\n        //data\r\n      } finally {\r\n        // Updates the display\r\n        graph.getModel().endUpdate();\r\n        graph.fit();\r\n        graph.view.rendering = true;\r\n        graph.refresh();\r\n        this.setState((prevState) => ({\r\n          ...prevState,\r\n          gnsp: graph,\r\n        }));\r\n      }\r\n\r\n      // drag node\r\n      function addToolbarItem(graph, toolbar, prototype, image) {\r\n        var funct = function (graph, evt, cell) {\r\n          graph.stopEditing(false);\r\n          var pt = graph.getPointForEvent(evt);\r\n          var vertex = graph.getModel().cloneCell(prototype);\r\n          vertex.geometry.x = pt.x;\r\n          vertex.geometry.y = pt.y;\r\n\r\n          graph.setSelectionCells(graph.importCells([vertex], 0, 0, cell));\r\n        };\r\n        var img = toolbar.addMode(\r\n          \"Node\",\r\n          image,\r\n          function (evt, cell) {\r\n            var pt = this.graph.getPointForEvent(evt);\r\n            funct(graph, evt, cell, pt.x, pt.y);\r\n          },\r\n          null,\r\n          null /** style */,\r\n          null\r\n        );\r\n        // Disables dragging if element is disabled. This is a workaround\r\n        // for wrong event order in IE. Following is a dummy listener that\r\n        // is invoked as the last listener in IE.\r\n        mxEvent.addListener(img, \"mousedown\", function (evt) {\r\n          // do nothing\r\n        });\r\n        // This listener is always called first before any other listener\r\n        // in all browsers.\r\n        mxEvent.addListener(img, \"mousedown\", function (evt) {\r\n          if (img.enabled === false) {\r\n            mxEvent.consume(evt);\r\n          }\r\n        });\r\n        mxUtils.makeDraggable(img, graph, funct);\r\n\r\n        return img;\r\n      }\r\n     \r\n    }\r\n  }\r\n  /**\r\n   * Close the modal of the bpmn diagram\r\n   */\r\n  handleCloseModal() {\r\n    this.setState((prevState) => ({ ...prevState, showModal: false }));\r\n  }\r\n  /**\r\n   *\r\n   * @returns json of the abstract graph in screen\r\n   */\r\n  getObj() {\r\n    /** Copy of the object graph */\r\n    let copyCells = { ...this.state.gnsp.getModel().cells };\r\n    let cells = [];\r\n    let tasks = [];\r\n    let nodes = [];\r\n    let links = [];\r\n    for (const [k, v] of Object.entries(copyCells)) {\r\n      cells.push(v);\r\n    }\r\n    links = cells.filter((c) => c.source && c.target);\r\n    links = links.map((l) => {\r\n      return {\r\n        source: l.source.id,\r\n        target: l.target.id,\r\n      };\r\n    });\r\n    /** Filter the component that matter (tasks, nodes, arcs) */\r\n    cells = cells.filter((c) => c.style);\r\n\r\n    tasks = cells.filter((c) => c.value);\r\n\r\n    nodes = cells.filter((c) => c.style === \"ROUNDED\");\r\n    /** Filter the tasks */\r\n    let points = [];\r\n    let close = [];\r\n    tasks.map((task) => {\r\n      /* \r\n        Relationship between nodes and task, to which it belongs and distance between them\r\n      */\r\n      let nodeBelongs = nodes.map((node) => {\r\n        return {\r\n          task: task,\r\n          node: node,\r\n          distance: Math.sqrt(\r\n            Math.pow(task.geometry.x - node.geometry.x, 2) +\r\n              Math.pow(task.geometry.y - node.geometry.y, 2)\r\n          ),\r\n          belongs:\r\n            task.geometry.x + task.geometry.width / 2 > node.geometry.x &&\r\n            task.geometry.x + task.geometry.width / 2 <\r\n              node.geometry.x + node.geometry.width &&\r\n            task.geometry.y + task.geometry.height / 2 > node.geometry.y &&\r\n            task.geometry.y + task.geometry.height / 2 <\r\n              node.geometry.y + node.geometry.height,\r\n        };\r\n      });\r\n\r\n      points.push(nodeBelongs);\r\n    });\r\n    /** Node to witch task belongs */\r\n    points = points.map((point) => point.filter((p) => p.belongs));\r\n    /**  if there is more than one node to which the task belongs */\r\n    points.map((point) => {\r\n      close.push(\r\n        point.filter((poi) => {\r\n          return poi.distance === Math.min(...point.map((p) => p.distance));\r\n        })[0]\r\n      );\r\n    });\r\n    /** Filter the nodes and the tasks that it has */\r\n    let updateNodes = nodes.map((node) => {\r\n      let list_tasks = close\r\n        .filter((task) => task.node.id === node.id)\r\n        .map((task) => task.task.id);\r\n      let updateTaks = [];\r\n      this.props.tasks.map((task) => {\r\n        list_tasks.forEach((id) => {\r\n          if (id === task.id) {\r\n            updateTaks.push({\r\n              ...task,\r\n              id: task.desc,\r\n              desc: task.id,\r\n            });\r\n          }\r\n        });\r\n      });\r\n      let listTest = nodes\r\n        .filter(\r\n          (n) =>\r\n            node.geometry.x > n.geometry.x &&\r\n            node.geometry.x < n.geometry.x + n.geometry.width &&\r\n            node.geometry.y > n.geometry.y &&\r\n            node.geometry.y < n.geometry.y + n.geometry.width\r\n        )\r\n        .map((n) => n.id);\r\n      return {\r\n        id: node.id,\r\n        list_tasks: updateTaks,\r\n        subgraph: listTest,\r\n      };\r\n    });\r\n\r\n    const obj = {\r\n      tasks: [...this.props.tasks],\r\n      links: links,\r\n      nodespy: updateNodes,\r\n    };\r\n\r\n    return obj;\r\n  }\r\n  /**\r\n   * Call api for check if there is a loop in the abstact graph\r\n   * @param {object} reqOP object for the api request\r\n   * @returns json of boolean value\r\n   */\r\n  isLoop(reqOP) {\r\n    return fetch(\"http://localhost:3001/isloop\", reqOP)\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          throw new Error(\"No response\");\r\n        }\r\n      })\r\n      .then((json) => {\r\n        return json;\r\n      });\r\n  }\r\n  /**\r\n   * Call api for check if there is a start node in the abstract graph\r\n   * @param {object} reqOP object for the api request\r\n   * @returns json of boolean value\r\n   */\r\n  noStart(reqOP) {\r\n    return fetch(\"http://localhost:3001/getstart\", reqOP)\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          throw new Error(\"No response\");\r\n        }\r\n      })\r\n      .then((json) => {\r\n        return json;\r\n      });\r\n  }\r\n  /**\r\n   * Call api for render modal and the BPMN diagram\r\n   * call and check if there is a start node\r\n   */\r\n  generateBPMN() {\r\n    const obj = this.getObj();\r\n    const reqOP = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(obj),\r\n    };\r\n    this.noStart(reqOP).then((start) => {\r\n      start = JSON.parse(start.toLowerCase());\r\n      if (start) {\r\n        fetch(\"http://localhost:3001/genbpmn\", reqOP).then((res) => {\r\n          res.json().then((data) => {\r\n            this.setState((prevState) => ({\r\n              ...prevState,\r\n              bpmn: data,\r\n              comp: false,\r\n              showModal: true,\r\n            }));\r\n          });\r\n        });\r\n      } else {\r\n        alert(\"Please give me an initial node\");\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Call api for check the new compute time\r\n   */\r\n  compute() {\r\n    const obj = this.getObj();\r\n    const reqOP = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(obj),\r\n    };\r\n    //loop is not working properly\r\n    this.noStart(reqOP).then((start) => {\r\n      this.isLoop(reqOP).then((loop) => {\r\n        loop = JSON.parse(loop.toLowerCase());\r\n        start = JSON.parse(start.toLowerCase());\r\n        if (start) {\r\n          if (!loop) {\r\n            fetch(\"http://localhost:3001/modgraph\", reqOP).then((res) => {\r\n              res.json().then((data) => {\r\n                this.setState((prevState) => ({\r\n                  ...prevState,\r\n                  max: data.maxTime,\r\n                  min: data.minTime,\r\n                  comp: !prevState.comp,\r\n                }));\r\n              });\r\n            });\r\n          } else {\r\n            alert(\r\n              \"Watch out! , your abstract graph maybe has a loop, that’s a conflict\"\r\n            );\r\n          }\r\n        } else {\r\n          alert(\"Please give me an initial node\");\r\n          this.setState((prevState) => ({\r\n            ...prevState,\r\n            comp: false,\r\n          }));\r\n        }\r\n      });\r\n    });\r\n  }\r\n/**\r\n * @returns render of the component abstract graph, side menu and modal for bpmn\r\n */\r\n  render() {\r\n    return (\r\n      <>\r\n        <div\r\n          className=\"tbContainer\"\r\n          ref=\"tbContainer\"\r\n          id=\"tbContainer\"\r\n          style={{\r\n            paddingRight: 100,\r\n            color: \"#000000\",\r\n            marginRight: 10,\r\n            marginTop: 3,\r\n            \"& img\": {\r\n              padding: 100,\r\n            },\r\n          }}\r\n        >\r\n          <Tooltip title=\"Compute\">\r\n            <IconButton\r\n              aria-label=\"Compute\"\r\n              onClick={this.compute}\r\n              color=\"inherit\"\r\n              style={{ padding: 0, paddingBottom: 10 }}\r\n            >\r\n              <AccessTimeIcon fontSize=\"large\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Generate BPMN\">\r\n            <IconButton\r\n              arial-label=\"Generate BPMN\"\r\n              onClick={this.generateBPMN}\r\n              color=\"inherit\"\r\n              style={{ padding: 0, paddingBottom: 10 }}\r\n            >\r\n              <AccountTreeIcon fontSize=\"large\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </div>\r\n\r\n        <Menu>\r\n          <div style={{ paddingTop: 100 }}>\r\n            <div\r\n              className=\"graph-container\"\r\n              ref=\"divGraph\"\r\n              id=\"divGraph\"\r\n              style={{ paddingLeft: 30, backgroundImage: grid, margin: 30 }}\r\n            />\r\n            <ComputeTime\r\n              comp={this.state.comp}\r\n              max={this.state.max}\r\n              min={this.state.min}\r\n            />\r\n          </div>\r\n\r\n          <ReactModal\r\n            isOpen={this.state.showModal}\r\n            style={{\r\n              overlay: {\r\n                position: \"fixed\",\r\n                top: \"50px\",\r\n              },\r\n            }}\r\n            contentLabel=\"BPMN Diagram\"\r\n          >\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              color=\"secondary\"\r\n              onClick={this.handleCloseModal}\r\n            >\r\n              <CloseIcon fontSize=\"large\" />\r\n            </IconButton>\r\n            {this.state.bpmn !== \"\" ? (\r\n              <BpmnDiagram xml={this.state.bpmn} />\r\n            ) : (\r\n              <PointSpreadLoading size={\"large\"} color={\"#7E6383\"} />\r\n            )}\r\n          </ReactModal>\r\n        </Menu>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default DiagramComp;\r\n","C:\\Users\\angel\\stage-bpmn\\client\\src\\helper\\getbpmn.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":47,"column":6,"nodeType":"103","endLine":47,"endColumn":19,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":67,"column":22,"nodeType":"107","messageId":"108","endLine":67,"endColumn":24},{"ruleId":"101","severity":1,"message":"109","line":70,"column":3,"nodeType":"110","endLine":70,"endColumn":12,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":13,"column":8,"nodeType":"110","messageId":"114","endLine":13,"endColumn":13},{"ruleId":"112","severity":1,"message":"115","line":26,"column":3,"nodeType":"110","messageId":"114","endLine":26,"endColumn":15},{"ruleId":"112","severity":1,"message":"116","line":29,"column":3,"nodeType":"110","messageId":"114","endLine":29,"endColumn":14},{"ruleId":"112","severity":1,"message":"117","line":30,"column":3,"nodeType":"110","messageId":"114","endLine":30,"endColumn":18},{"ruleId":"118","severity":1,"message":"119","line":352,"column":19,"nodeType":"120","messageId":"121","endLine":352,"endColumn":31},{"ruleId":"118","severity":1,"message":"119","line":359,"column":23,"nodeType":"120","messageId":"121","endLine":359,"endColumn":35},{"ruleId":"105","severity":1,"message":"106","line":420,"column":25,"nodeType":"107","messageId":"108","endLine":420,"endColumn":27},{"ruleId":"105","severity":1,"message":"106","line":435,"column":28,"nodeType":"107","messageId":"108","endLine":435,"endColumn":30},{"ruleId":"122","severity":1,"message":"123","line":498,"column":68,"nodeType":"124","messageId":"125","endLine":498,"endColumn":70},{"ruleId":"105","severity":1,"message":"106","line":503,"column":39,"nodeType":"107","messageId":"108","endLine":503,"endColumn":41},{"ruleId":"105","severity":1,"message":"106","line":526,"column":35,"nodeType":"107","messageId":"108","endLine":526,"endColumn":37},{"ruleId":"105","severity":1,"message":"106","line":556,"column":37,"nodeType":"107","messageId":"108","endLine":556,"endColumn":39},{"ruleId":"105","severity":1,"message":"106","line":579,"column":27,"nodeType":"107","messageId":"108","endLine":579,"endColumn":29},{"ruleId":"112","severity":1,"message":"126","line":588,"column":19,"nodeType":"110","messageId":"114","endLine":588,"endColumn":22},{"ruleId":"112","severity":1,"message":"127","line":672,"column":17,"nodeType":"110","messageId":"114","endLine":672,"endColumn":18},{"ruleId":"105","severity":1,"message":"106","line":691,"column":22,"nodeType":"107","messageId":"108","endLine":691,"endColumn":24},{"ruleId":"105","severity":1,"message":"106","line":718,"column":24,"nodeType":"107","messageId":"108","endLine":718,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":731,"column":35,"nodeType":"107","messageId":"108","endLine":731,"endColumn":37},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'makeNodes' and 'tasks'. Either include them or remove the dependency array.","ArrayExpression",["130"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect contains a call to 'setDisabled'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [couple] as a second argument to the useEffect Hook.","Identifier",["131"],"no-unused-vars","'arrow' is defined but never used.","unusedVar","'mxDragSource' is defined but never used.","'mxCellState' is defined but never used.","'mxVertexHandler' is defined but never used.","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'arc' is assigned a value but never used.","'k' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [nodes, arcs, makeNodes, tasks]",{"range":"136","text":"137"},"Add dependencies array: [couple]",{"range":"138","text":"139"},[1581,1594],"[nodes, arcs, makeNodes, tasks]",[2484,2484],", [couple]"]